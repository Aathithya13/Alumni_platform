{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Selva\\\\OneDrive\\\\Desktop\\\\Alumini\\\\frontend\\\\client\\\\src\\\\components\\\\EditPost.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditPost() {\n  _s();\n  const {\n    id\n  } = useParams(); // Extract post ID from the route params\n  const [description, setDescription] = useState(''); // Store description text\n  const [reference, setReference] = useState(''); // Store reference URL\n  const [image, setImage] = useState(null); // To hold the new image file\n  const [currentImage, setCurrentImage] = useState(''); // To hold current image URL\n  const navigate = useNavigate(); // To programmatically navigate after submission\n\n  // Function to handle image selection\n  const handleImage = e => {\n    setImage(e.target.files[0]); // Set new image file in state\n  };\n\n  // Fetch existing post data when the component is loaded\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/post/${id}`);\n        const {\n          image,\n          description,\n          reference\n        } = response.data.post;\n        setCurrentImage(image); // Set current image\n        setDescription(description); // Set current description\n        setReference(reference); // Set current reference\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    fetchData(); // Call the fetch function\n  }, [id]); // Re-run when `id` changes\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    console.log(\"Form Submitted\"); // Prevent default form submission\n\n    const formData = new FormData(); // Create FormData object for file upload\n    formData.append('description', description);\n    formData.append('reference', reference);\n    if (image) {\n      formData.append('postImage', image); // Append image if it's updated\n    }\n    try {\n      const response = await axios.post(`http://localhost:5000/edit/${id}`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log(response.data);\n      navigate(`/post/${id}`); // Navigate to the updated post\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        placeholder: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"url\",\n        value: reference,\n        onChange: e => setReference(e.target.value),\n        placeholder: \"Reference Link\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), currentImage && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:5000/public/posts/${currentImage}`,\n        alt: \"Current Post\",\n        width: \"200\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n_s(EditPost, \"dgq+M2sMOsDl2tmLjgs0din57uo=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EditPost;\nexport default EditPost;\nvar _c;\n$RefreshReg$(_c, \"EditPost\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","axios","jsxDEV","_jsxDEV","EditPost","_s","id","description","setDescription","reference","setReference","image","setImage","currentImage","setCurrentImage","navigate","handleImage","e","target","files","fetchData","response","get","data","post","err","console","log","handleSubmit","preventDefault","formData","FormData","append","headers","children","onSubmit","type","value","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","width","_c","$RefreshReg$"],"sources":["C:/Users/Selva/OneDrive/Desktop/Alumini/frontend/client/src/components/EditPost.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nfunction EditPost() {\r\n    const { id } = useParams();  // Extract post ID from the route params\r\n    const [description, setDescription] = useState('');  // Store description text\r\n    const [reference, setReference] = useState('');  // Store reference URL\r\n    const [image, setImage] = useState(null);  // To hold the new image file\r\n    const [currentImage, setCurrentImage] = useState('');  // To hold current image URL\r\n    const navigate = useNavigate();  // To programmatically navigate after submission\r\n\r\n    // Function to handle image selection\r\n    const handleImage = (e) => {\r\n        setImage(e.target.files[0]);  // Set new image file in state\r\n    };\r\n\r\n    // Fetch existing post data when the component is loaded\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:5000/post/${id}`);\r\n                const { image, description, reference } = response.data.post;\r\n                \r\n                setCurrentImage(image);  // Set current image\r\n                setDescription(description);  // Set current description\r\n                setReference(reference);  // Set current reference\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        };\r\n        fetchData();  // Call the fetch function\r\n    }, [id]);  // Re-run when `id` changes\r\n\r\n    // Handle form submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault(); \r\n        console.log(\"Form Submitted\"); // Prevent default form submission\r\n\r\n        const formData = new FormData();  // Create FormData object for file upload\r\n        formData.append('description', description);\r\n        formData.append('reference', reference);\r\n        \r\n        if (image) {\r\n            formData.append('postImage', image);  // Append image if it's updated\r\n        }\r\n\r\n        try {\r\n            const response = await axios.post(`http://localhost:5000/edit/${id}`, formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            });\r\n            console.log(response.data);\r\n            navigate(`/post/${id}`);  // Navigate to the updated post\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <input \r\n                    type='text'\r\n                    value={description}\r\n                    onChange={(e) => setDescription(e.target.value)}\r\n                    placeholder=\"Description\"\r\n                />\r\n                <input \r\n                    type='url'\r\n                    value={reference}\r\n                    onChange={(e) => setReference(e.target.value)}\r\n                    placeholder=\"Reference Link\"\r\n                />\r\n                {/* Show the current image if it exists */}\r\n                {currentImage && <img src={`http://localhost:5000/public/posts/${currentImage}`} alt=\"Current Post\" width=\"200\" />}\r\n                <input \r\n                    type='file'\r\n                    onChange={handleImage}\r\n                />\r\n                <button type='submit'>Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditPost;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}