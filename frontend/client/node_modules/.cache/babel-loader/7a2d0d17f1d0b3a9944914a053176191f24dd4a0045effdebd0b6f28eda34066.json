{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Selva\\\\OneDrive\\\\Desktop\\\\Alumini\\\\frontend\\\\client\\\\src\\\\components\\\\DashBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Alert } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Fetch user data from backend (for example using token from cookies)\n    const fetchUserData = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/dashboard\", {\n          // Send token (or cookies) for authentication if needed\n          headers: {\n            Authorization: `Bearer ${document.cookie.split('token=')[1]}` // Assuming token is stored in cookies\n          }\n        });\n        if (response.data.username) {\n          setUsername(response.data.username); // Set the username from the backend\n        } else {\n          setMessage(\"Please log in to view the dashboard.\");\n          navigate('/login'); // Redirect to login if not logged in\n        }\n      } catch (error) {\n        setMessage(\"An error occurred while fetching user data.\");\n        console.error(\"Error:\", error);\n        navigate('/login'); // Redirect to login if there's an error\n      }\n    };\n    fetchUserData();\n  }, [navigate]);\n  const handleLogout = async () => {\n    try {\n      await axios.post(\"http://localhost:5000/logout\");\n      navigate('/login'); // Redirect to login page after logout\n    } catch (error) {\n      setMessage(\"Logout failed. Please try again.\");\n      console.error(\"Logout error:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Welcome to your Dashboard, \", username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      onClose: () => setMessage(\"\"),\n      dismissible: true,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"danger\",\n      onClick: handleLogout,\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"ItCkD6pVT3jVrbRzzcP0C+oSQoQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Button","Alert","axios","useNavigate","jsxDEV","_jsxDEV","Dashboard","_s","message","setMessage","username","setUsername","navigate","fetchUserData","response","get","headers","Authorization","document","cookie","split","data","error","console","handleLogout","post","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClose","dismissible","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Selva/OneDrive/Desktop/Alumini/frontend/client/src/components/DashBoard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button, Alert } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Dashboard = () => {\r\n    const [message, setMessage] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        // Fetch user data from backend (for example using token from cookies)\r\n        const fetchUserData = async () => {\r\n            try {\r\n                const response = await axios.get(\"http://localhost:5000/dashboard\", {\r\n                    // Send token (or cookies) for authentication if needed\r\n                    headers: {\r\n                        Authorization: `Bearer ${document.cookie.split('token=')[1]}` // Assuming token is stored in cookies\r\n                    }\r\n                });\r\n                \r\n                if (response.data.username) {\r\n                    setUsername(response.data.username); // Set the username from the backend\r\n                } else {\r\n                    setMessage(\"Please log in to view the dashboard.\");\r\n                    navigate('/login'); // Redirect to login if not logged in\r\n                }\r\n            } catch (error) {\r\n                setMessage(\"An error occurred while fetching user data.\");\r\n                console.error(\"Error:\", error);\r\n                navigate('/login'); // Redirect to login if there's an error\r\n            }\r\n        };\r\n\r\n        fetchUserData();\r\n    }, [navigate]);\r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n            await axios.post(\"http://localhost:5000/logout\");\r\n            navigate('/login'); // Redirect to login page after logout\r\n        } catch (error) {\r\n            setMessage(\"Logout failed. Please try again.\");\r\n            console.error(\"Logout error:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <h2>Welcome to your Dashboard, {username}</h2>\r\n            {message && (\r\n                <Alert variant=\"danger\" onClose={() => setMessage(\"\")} dismissible>\r\n                    {message}\r\n                </Alert>\r\n            )}\r\n\r\n            <Button variant=\"danger\" onClick={handleLogout}>\r\n                Logout\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}